name: CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: formanmaks/cicd_workshop

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8.10'

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "E303,W292,E265,E302,E231,W293,E251,E501,E305,F401,W291"

  build_and_push:
    runs-on: ubuntu-latest
    name: Build and push docker image
    needs: lint
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
    steps:

      - name: Git checkout
        uses: actions/checkout@v3

      - id: commit_hash
        run: echo "::set-output name=commit_hash::${GITHUB_SHA::7}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ steps.commit_hash.outputs.commit_hash }}
  deploy: 
      runs-on: ubuntu-latest
      name: Deploy
      needs: Build_and_push
      strategy:
        matrix:
          HOST: [3.64.124.158, 3.121.29.112]
          USERNAME: [ubuntu]
      
      steps:

        - name: Deploy to EC2 instance via SSH
          uses: appleboy/ssh-action@v0.1.3
          with:
            host: ${{ matrix.HOST }}
            username: ${{ matrix.USERNAME }}
            key: ${{ secrets.KEY }}
            port: 22
            script: |
              # login docker
              sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
              
              cd ~/application

              docker-compose stop

              docker rm $(docker ps -a -q)   
              
              # Create docker-compose
              echo \
              "version: '3.8'

              services:

                app:
                  container_name: student-api
                  image: ${{ env.REGISTRY }}:${{ needs.build_and_push.outputs.commit_hash }}
                  restart: always
                  ports:
                    - "5000:5000"
                  environment:
                    - DB_USERNAME=devops
                    - DB_PASSWORD=devops12
                    - DB_HOSTNAME=db:3306
                    - DB_NAME=student
                  depends_on:
                    db:
                      condition: service_healthy

                db:
                  image: mysql:8.0.21
                  container_name: student-db
                  volumes:
                    - mysql_data:/var/lib/mysql
                  ports:
                    - '3306:3306'
                  restart: always
                  environment:
                    MYSQL_ROOT_PASSWORD: devops12
                    MYSQL_DATABASE: student
                    MYSQL_USER: devops
                    MYSQL_PASSWORD: devops12
                  healthcheck:
                    test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
                    interval: 5s
                    timeout: 10s
                    retries: 5
                    start_period: 30s
              
              volumes:
                mysql_data:" > ~/application/docker-compose.yml
              
              docker-compose up -d 

  hostcheck:
    runs-on: ubuntu-latest
    name: Host check
    needs: deploy
    strategy:
      matrix:
        HOST: ['3.64.124.158', '3.121.29.112']
        PORT: [5000]

    steps:
      - name: Check host health
        run: 
          curl ${{ matrix.HOST }}:${{ matrix.PORT }}/api     